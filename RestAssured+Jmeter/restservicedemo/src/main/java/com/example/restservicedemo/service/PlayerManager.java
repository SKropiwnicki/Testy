package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.restservicedemo.domain.Player;
import com.example.restservicedemo.domain.Weapon;

public class PlayerManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PLAYER = "CREATE TABLE Player(p_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," +
			" nickname varchar(20), level integer, profession varchar(20))";
	private static final String CREATE_TABLE_WEAPON = "CREATE TABLE Weapon(w_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(20), description varchar(60), damage integer, owner_id bigint FOREIGN KEY references Player(p_id))";

	private PreparedStatement addPlayerStmt;
	private PreparedStatement deleteAllPlayersStmt;
	private PreparedStatement getAllPlayersStmt;
	private PreparedStatement getPlayerByIdStmt;
	private PreparedStatement deleteByIdStmt;
	private PreparedStatement getPlayerByNicknameStmt;
	private PreparedStatement addWeaponStmt;
	private PreparedStatement sellWeaponStmt;
	private PreparedStatement getAllPlayersWithWeaponsStmt;
	private PreparedStatement getWeaponWithOwnerStmt;
	private PreparedStatement getAllWeaponsStmt;
	private PreparedStatement deleteAllWeaponsStmt;
	private PreparedStatement resetPlayerIncrementationStmt;
	private PreparedStatement resetWeaponIncrementationStmt;

	private Statement statement;

	public PlayerManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Player".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PLAYER);

			rs = connection.getMetaData().getTables(null, null, null,
					null);
			tableExists = false;
			while (rs.next()) {
				if ("Weapon".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_WEAPON);

			addPlayerStmt = connection
					.prepareStatement("INSERT INTO Player (nickname, level, profession) VALUES ( ?, ?, ?)");
			deleteAllPlayersStmt = connection
					.prepareStatement("DELETE  FROM Player");
			getAllPlayersStmt = connection
					.prepareStatement("SELECT p_id, nickname, level, profession FROM Player");
			getPlayerByIdStmt = connection
					.prepareStatement("SELECT p_id, nickname, level, profession FROM Player where p_id = ?");
			getPlayerByNicknameStmt = connection
					.prepareStatement("SELECT p_id, nickname, level, profession FROM Player where nickname = ?");
			deleteByIdStmt = connection
					.prepareStatement("DELETE FROM Player where p_id = ?");

			addWeaponStmt = connection
					.prepareStatement("INSERT INTO Weapon (name, description, damage) VALUES (?, ?, ?)");
			sellWeaponStmt = connection
					.prepareStatement("UPDATE Weapon SET owner_id = ? WHERE w_id = ?");
			getAllWeaponsStmt = connection
					.prepareStatement("SELECT w_id, name, description, damage FROM Weapon");
			getWeaponWithOwnerStmt = connection
					.prepareStatement("SELECT p_id, nickname, level, profession, w_id, name, description, damage, owner_id FROM Player JOIN Weapon ON w_id = ? WHERE p_id=owner_id");
			deleteAllWeaponsStmt = connection
					.prepareStatement("DELETE  FROM Weapon");
			getAllPlayersWithWeaponsStmt = connection
					.prepareStatement("SELECT p_id, nickname, level, profession, w_id, name, description, damage, owner_id FROM Player JOIN Weapon ON owner_id = p_id");

			resetPlayerIncrementationStmt = connection
					.prepareStatement("ALTER TABLE Player ALTER COLUMN p_id RESTART WITH 1");
			resetWeaponIncrementationStmt = connection
					.prepareStatement("ALTER TABLE Weapon ALTER COLUMN w_id RESTART WITH 1");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearPlayers() {
		try {
			deleteAllPlayersStmt.executeUpdate();
			resetPlayerIncrementationStmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void clearWeapons() {
		try {
			deleteAllWeaponsStmt.executeUpdate();
			resetWeaponIncrementationStmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addPlayer(Player player) {
		int count = 0;
		try {
			addPlayerStmt.setString(1, player.getNickname());
			addPlayerStmt.setInt(2, player.getLevel());
			addPlayerStmt.setString(3, player.getProfessionStr());

			count = addPlayerStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Player> getAllPlayers() {
		List<Player> players = new ArrayList<Player>();

		try {
			ResultSet rs = getAllPlayersStmt.executeQuery();

			while (rs.next()) {
				Player p = new Player();
				p.setId(rs.getInt("p_id"));
				p.setNickname(rs.getString("nickname"));
				p.setLevel(rs.getInt("level"));
				p.setProfessionStr(rs.getString("profession"));
				players.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return players;
	}
	public Player getPlayerByNickname(String nickname) {
		Player p = new Player();
		try {
			getPlayerByNicknameStmt.setString(1, nickname);
			ResultSet rs = getPlayerByNicknameStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("p_id"));
				p.setNickname(rs.getString("nickname"));
				p.setLevel(rs.getInt("level"));
				p.setProfessionStr(rs.getString("profession"));

				break;
			}
			return p;

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}

	public Player getPlayer(Long id) {
		Player p = new Player();
		try {
			getPlayerByIdStmt.setLong(1, id);
			ResultSet rs = getPlayerByIdStmt.executeQuery();

			while (rs.next()) {
				p.setNickname(rs.getString("nickname"));
				p.setId(rs.getInt("p_id"));
				p.setLevel(rs.getInt("level"));
				p.setProfessionStr(rs.getString("profession"));

				break;
			}
			return p;

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}
	public void deletePlayer(Long id) {
		try {
			deleteByIdStmt.setLong(1, id);
			deleteByIdStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addWeapon(Weapon weapon) {
		int count = 0;
		try {
			addWeaponStmt.setString(1, weapon.getName());
			addWeaponStmt.setString(2, weapon.getDescription());
			addWeaponStmt.setInt(3, weapon.getDamage());

			count = addWeaponStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}


// both weapon and player need to have auto-generated id from DB
	public int sellWeapon(Weapon weapon, Player player) {
		if(!player.hasId() && !weapon.hasId())
			return -1;
		int count = 0;
		try {

			sellWeaponStmt.setLong(1, player.getId());
			sellWeaponStmt.setLong(2, weapon.getId());


			count = sellWeaponStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	//without owners
	public List<Weapon> getAllWeapons() {
		List<Weapon> weapons = new ArrayList<Weapon>();

		try {
			ResultSet rs = getAllWeaponsStmt.executeQuery();

			while (rs.next()) {
				Weapon w = new Weapon();
				w.setId(rs.getInt("w_id"));
				w.setName(rs.getString("name"));
				w.setDescription(rs.getString("description"));
				w.setDamage(rs.getInt("damage"));
				weapons.add(w);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return weapons;
	}

	//with owner as well
	public Weapon getWeaponWithOwner(Weapon weapon) {

		Weapon w = new Weapon();
		try {

			getWeaponWithOwnerStmt.setLong(1, weapon.getId());
			ResultSet rs = getWeaponWithOwnerStmt.executeQuery();

			while (rs.next()) {

				Player p = new Player();

				p.setId(rs.getInt("p_id"));
				p.setNickname(rs.getString("nickname"));
				p.setLevel(rs.getInt("level"));
				p.setProfessionStr(rs.getString("profession"));

				w.setId(rs.getInt("w_id"));
				w.setName(rs.getString("name"));
				w.setDamage(rs.getInt("damage"));
				w.setDescription(rs.getString("description"));

				w.setOwner(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return w;
	}

	public Map<Player, List<Weapon>> getPlayersWithWeapons() {

		List<Weapon> weapons = new ArrayList<Weapon>();

		Map<Player, List<Weapon>> result = new HashMap<>();

		try {
			ResultSet rs = getAllPlayersWithWeaponsStmt.executeQuery();

			while (rs.next()) {

				Player p = new Player();

				p.setId(rs.getInt("p_id"));
				p.setNickname(rs.getString("nickname"));
				p.setLevel(rs.getInt("level"));
				p.setProfessionStr(rs.getString("profession"));


				Weapon w = new Weapon();
				w.setId(rs.getInt("w_id"));
				w.setName(rs.getString("name"));
				w.setDamage(rs.getInt("damage"));
				w.setDescription(rs.getString("description"));

				w.setOwner(p);

				if (result.containsKey(p)) {
					weapons = result.get(p);
					weapons.add(w);
				} else {
					weapons = new ArrayList<>();
					weapons.add(w);
					result.put(p, weapons);
				}

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

}
