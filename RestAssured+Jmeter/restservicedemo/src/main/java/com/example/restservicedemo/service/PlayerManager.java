package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Player;

public class PlayerManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PERSON = "CREATE TABLE Player(id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," +
			" nickname varchar(20), level integer, profession varchar(20), weaponID bigint FOREIGN KEY REFERENCES Weapon(id))";
	private static final String CREATE_TABLE_WEAPON = "CREATE TABLE Weapon(id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, nickname varchar(20), level integer, profession varchar(20), weaponID bigint";

	private PreparedStatement addPlayerStmt;
	private PreparedStatement deleteAllPlayersStmt;
	private PreparedStatement getAllPlayersStmt;
	private PreparedStatement getPlayerByIdStmt;
	private PreparedStatement deleteByIdStmt;

	private Statement statement;

	public PlayerManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Player".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
/*
			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PERSON);

			tableExists = false;
			while (rs.next()) {
				if ("Weapon".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_WEAPON);*/

			addPlayerStmt = connection
					.prepareStatement("INSERT INTO Player (id, nickname, level, profession, weaponID) VALUES (?, ?, ?, ?, ?)");
			deleteAllPlayersStmt = connection
					.prepareStatement("DELETE  FROM Player");
			getAllPlayersStmt = connection
					.prepareStatement("SELECT id, nickname, level, profession, weaponID FROM Player");
			getPlayerByIdStmt = connection
					.prepareStatement("SELECT id, nickname, level, profession, weaponID FROM Player where id = ?");
			deleteByIdStmt = connection
					.prepareStatement("DELETE FROM Player where id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearPlayers() {
		try {
			deleteAllPlayersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addPlayer(Player player) {
		int count = 0;
		try {
			addPlayerStmt.setLong(1, player.getId());
			addPlayerStmt.setString(2, player.getNickname());
			addPlayerStmt.setInt(3, player.getLevel());
			addPlayerStmt.setString(4, player.getProfessionStr());
			addPlayerStmt.setLong(5, player.getWeaponId());

			count = addPlayerStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Player> getAllPlayers() {
		List<Player> players = new ArrayList<Player>();

		try {
			ResultSet rs = getAllPlayersStmt.executeQuery();

			while (rs.next()) {
				Player p = new Player();
				p.setId(rs.getInt("id"));
				p.setNickname(rs.getString("nickname"));
				p.setLevel(rs.getInt("level"));
				p.setProfession(rs.getString("profession"));
				p.setWeaponId(rs.getLong("weaponID"));
				players.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return players;
	}

	public Player getPlayer(Long id) {
		Player p = new Player();
		try {
			getPlayerByIdStmt.setLong(1, id);
			ResultSet rs = getPlayerByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setNickname(rs.getString("nickname"));
				p.setLevel(rs.getInt("level"));
				p.setProfession(rs.getString("profession"));
				p.setWeaponId(rs.getLong("weaponID"));

				break;
			}
			return p;

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}
	public void deletePlayer(Long id) {
		try {
			deleteByIdStmt.setLong(1, id);
			deleteByIdStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


}
